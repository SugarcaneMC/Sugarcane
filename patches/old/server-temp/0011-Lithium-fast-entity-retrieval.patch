From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: The Arcane Brony <myrainbowdash949@gmail.com>
Date: Sun, 26 Jun 2022 19:02:15 +0200
Subject: [PATCH] Lithium fast entity retrieval

fixup! Lithium fast entity retrieval

diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
index f54ca6383298848b2ee7108c41fcea593f924881..7a6a8632cc4dc0390e5cc39676074d080532011e 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySectionStorage.java
@@ -33,34 +33,51 @@ public class EntitySectionStorage<T extends EntityAccess> {
     }
 
     public void forEachAccessibleNonEmptySection(AABB box, Consumer<EntitySection<T>> action) {
-        int i = 2;
-        int j = SectionPos.posToSectionCoord(box.minX - 2.0D);
-        int k = SectionPos.posToSectionCoord(box.minY - 4.0D);
-        int l = SectionPos.posToSectionCoord(box.minZ - 2.0D);
-        int m = SectionPos.posToSectionCoord(box.maxX + 2.0D);
-        int n = SectionPos.posToSectionCoord(box.maxY + 0.0D);
-        int o = SectionPos.posToSectionCoord(box.maxZ + 2.0D);
-
-        for(int p = j; p <= m; ++p) {
-            long q = SectionPos.asLong(p, 0, 0);
-            long r = SectionPos.asLong(p, -1, -1);
-            LongIterator longIterator = this.sectionIds.subSet(q, r + 1L).iterator();
-
-            while(longIterator.hasNext()) {
-                long s = longIterator.nextLong();
-                int t = SectionPos.y(s);
-                int u = SectionPos.z(s);
-                if (t >= k && t <= n && u >= l && u <= o) {
-                    EntitySection<T> entitySection = this.sections.get(s);
-                    if (entitySection != null && !entitySection.isEmpty() && entitySection.getStatus().isAccessible()) {
-                        action.accept(entitySection);
-                    }
-                }
+        // Sugarcane start - port lithium
+        int minX = SectionPos.posToSectionCoord(box.minX - 2.0D);
+        int minY = SectionPos.posToSectionCoord(box.minY - 2.0D);
+        int minZ = SectionPos.posToSectionCoord(box.minZ - 2.0D);
+        int maxX = SectionPos.posToSectionCoord(box.maxX + 2.0D);
+        int maxY = SectionPos.posToSectionCoord(box.maxY + 2.0D);
+        int maxZ = SectionPos.posToSectionCoord(box.maxZ + 2.0D);
+
+        // Vanilla order of the AVL long set is sorting by ascending long value. The x, y, z positions are packed into
+        // a long with the x position's lowest 22 bits placed at the MSB.
+        // Therefore the long is negative iff the 22th bit of the x position is set, which happens iff the x position
+        // is negative. A positive x position will never have its 22th bit set, as these big coordinates are far outside
+        // the world. y and z positions are treated as unsigned when sorting by ascending long value, as their sign bits
+        // are placed somewhere inside the packed long
+
+        for (int x = minX; x <= maxX; x++) {
+            for (int z = Math.max(minZ, 0); z <= maxZ; z++) {
+                this.forEachInColumn(x, minY, maxY, z, action);
             }
+            int bound = Math.min(-1, maxZ);
+            for (int z = minZ; z <= bound; z++) {
+                this.forEachInColumn(x, minY, maxY, z, action);
+            }
+        }
+    }
+
+    private void forEachInColumn(int x, int minY, int maxY, int z, Consumer<EntitySection<T>> action) {
+        //y from negative to positive, but y is treated as unsigned
+        for (int y = Math.max(minY, 0); y <= maxY; y++) {
+            this.consumeSection(x, y, z, action);
         }
 
+        int bound = Math.min(-1, maxY);
+        for (int y = minY; y <= bound; y++) {
+            this.consumeSection(x, y, z, action);
+        }
     }
 
+    private void consumeSection(int x, int y, int z, Consumer<EntitySection<T>> action) {
+        EntitySection<T> section = this.getSection(SectionPos.asLong(x, y, z));
+        if (section != null && section.getStatus().isAccessible()) {
+            action.accept(section);
+        }
+    } // Sugarcane end
+
     public LongStream getExistingSectionPositionsInChunk(long chunkPos) {
         int i = ChunkPos.getX(chunkPos);
         int j = ChunkPos.getZ(chunkPos);
