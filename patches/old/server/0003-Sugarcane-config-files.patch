From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SugarcaneMC <sugarcanemcorg@gmail.com>
Date: Tue, 7 Dec 2021 19:13:29 -0500
Subject: [PATCH] Sugarcane config files

also some settings from Yatopia & Sugarcane that don't deserve a patch, licensed under MIT license

diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index aa906caf51d81b26a5565a92ea24fb79c920a73a..03100139d802699c0b0a8de625eb785d0cdc7b76 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -235,7 +235,8 @@ public class TimingsExport extends Thread {
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
             pair("pufferfish", mapAsJSON(gg.pufferfish.pufferfish.PufferfishConfig.getConfigCopy(), null)), // Pufferfish
-            pair("purpur", mapAsJSON(Bukkit.spigot().getPurpurConfig(), null))
+            pair("purpur", mapAsJSON(Bukkit.spigot().getPurpurConfig(), null)),
+            pair("sugarcane", mapAsJSON(Bukkit.spigot().getSugarcaneConfig(), null))
             // Purpur end
         ));
 
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 107809776c08a005fa3f0346e42c9d92e753c411..c6ee0431484e70dd32b873eb205ad1653e1c5d62 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -242,7 +242,7 @@ public class PaperConfig {
         timings = reallyEnableTimings;
         // Pufferfish end
         boolean verboseTimings = getBoolean("timings.verbose", true);
-        TimingsManager.url = getString("timings.url", "https://timings.aikar.co/");
+        TimingsManager.url = getString("timings.url", "https://timin.gs/");
         // Purpur start
         if (org.purpurmc.purpur.PurpurConfig.version < 23 && TimingsManager.url.contains("timings.pl3x.net")) {
             set("timings.url", "https://timings.aikar.co/");
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 799955b4439ba7739dc011183aad25b39b526566..deb7340c7f728457ebe5188d242efc7b30abbaa6 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -244,6 +244,15 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         gg.pufferfish.pufferfish.PufferfishConfig.load(); // Pufferfish
         gg.pufferfish.pufferfish.PufferfishCommand.init(); // Pufferfish
 
+        // Sugarcane start - config
+        try {
+            org.sugarcanemc.sugarcane.config.SugarcaneConfig.init((java.io.File) options.valueOf("sugarcane-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        // Sugarcane end
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 260b5a61890ceac0e36aa08b70f0a0fa430cabb0..a94064a4f758a95b3e5115f6a70945438d3b8a0e 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -397,7 +397,7 @@ public abstract class LivingEntity extends Entity {
             this.clearFire();
         }
 
-        if (this.isAlive()) {
+        if (!org.sugarcanemc.sugarcane.config.SugarcaneConfig.disableEntityStuckChecks && this.isAlive()) { // Sugarcane
             boolean flag = this instanceof net.minecraft.world.entity.player.Player;
             if ((!gg.pufferfish.pufferfish.PufferfishConfig.enableSuffocationOptimization || (tickCount % 10 == 0 && couldPossiblyBeHurt(1.0F))) && this.isInWall()) { // Pufferfish - optimize suffocation
                 this.hurt(DamageSource.IN_WALL, 1.0F);
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 4451967905f4e564cd354226c79bf6df4364833a..a29ccf40c64a86b76243b632062927f3d2fa7708 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -171,6 +171,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur
 
+    public final org.sugarcanemc.sugarcane.config.SugarcaneWorldConfig sugarcaneConfig; // Sugarcane - world config
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -366,6 +368,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Paper
         this.purpurConfig = new org.purpurmc.purpur.PurpurWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
+        this.sugarcaneConfig = new org.sugarcanemc.sugarcane.config.SugarcaneWorldConfig((ServerLevel) this, ((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Sugarcane - world config
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index de0d8c1b4a6ad25a5003b0f682c1b26174059976..83bcbd9151b13c8b65f6ffd21950ecaf3eb90060 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -953,6 +953,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        org.sugarcanemc.sugarcane.config.SugarcaneConfig.init((File) console.options.valueOf("sugarcane-settings")); // Sugarcane - config
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -994,6 +995,7 @@ public final class CraftServer implements Server {
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
             world.purpurConfig.init(); // Purpur
+            world.sugarcaneConfig.init(); // Sugarcane
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2697,6 +2699,13 @@ public final class CraftServer implements Server {
             return org.purpurmc.purpur.PurpurConfig.config;
         }
 
+        // Sugarcane start - config
+        @Override
+        public YamlConfiguration getSugarcaneConfig() {
+            return org.sugarcanemc.sugarcane.config.SugarcaneConfig.config;
+        }
+        // Sugarcane end
+
         @Override
         public java.util.Properties getServerProperties() {
             return getProperties().properties;
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 6f14a1b26e92d0170538ed60c6a651a031e7209e..c88defd2af2d32f82abc9926e177eb53b153c356 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -161,6 +161,14 @@ public class Main {
                     .describedAs("Yml file");
                 // Purpur end
 
+                // Sugarcane start - config
+                acceptsAll(asList("sugarcane", "sugarcane-settings"), "File for Sugarcane settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("sugarcane.yml"))
+                        .describedAs("Yml file");
+                // Sugarcane end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..cce5ba02ac86bc23557d04d2d9b4a4a52e96bd02
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
@@ -0,0 +1,191 @@
+package org.sugarcanemc.sugarcane.config;
+
+import com.google.common.base.Throwables;
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+public class SugarcaneConfig {
+	public static File CONFIG_FILE;
+	private static final String HEADER = "This is the main configuration file for Sugarcane.\n"
+			+ "Sugarcane contains many breaking changes and settings, so know what you are doing!\n"
+			+ "You have been warned!\n"
+            + "Join our Discord to receive support & optimization help: https://sugarcanemc.org/discord\n";
+	/*========================================================================*/
+	public static YamlConfiguration config;
+    public static int version; // since we're remapping sidestreams' configs we need this public
+    public static boolean verbose; // since we're remapping sidestreams' configs we need this public
+    /*========================================================================*/
+
+	public static void init(File configFile) {
+		CONFIG_FILE = configFile;
+		config = new YamlConfiguration();
+		try {
+			config.load(CONFIG_FILE);
+		} catch (IOException ex) {
+		} catch (InvalidConfigurationException ex) {
+			Bukkit.getLogger().log(Level.SEVERE, "Could not load sugarcane.yml, please correct your syntax errors", ex);
+			throw Throwables.propagate(ex);
+		}
+		config.options().header(HEADER);
+		config.options().copyDefaults(true);
+		verbose = getBoolean("verbose", false);
+		version = getInt("config-version", 1);
+		set("config-version", 1);
+		removeLeftovers();
+		readConfig(SugarcaneConfig.class, null);
+	}
+
+	private static void removeLeftovers() {
+		// this method is only to remove non-used values in the config
+
+		// leftover from rainforest
+		if (config.get("world-settings") != null) {
+			set("world-settings", null);
+		}
+		if (config.get("allow-player-item-duplication") != null) {
+			set("allow-player-item-duplication", null);
+		}
+		if (config.get("allow-ridable-chestable-duping") != null) {
+			set("allow-ridable-chestable-duping", null);
+		}
+		if (config.get("allow-sand-duping") != null) {
+			set("allow-sand-duping", null);
+		}
+	}
+
+	protected static void logError(String s) {
+		Bukkit.getLogger().severe(s);
+	}
+
+	protected static void log(String s) {
+		if (verbose) {
+			Bukkit.getLogger().info(s);
+		}
+	}
+
+	static void readConfig(Class<?> clazz, Object instance) {
+		for (Method method : clazz.getDeclaredMethods()) {
+			if (Modifier.isPrivate(method.getModifiers())) {
+				if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+					try {
+						method.setAccessible(true);
+						method.invoke(instance);
+					} catch (InvocationTargetException ex) {
+						throw Throwables.propagate(ex.getCause());
+					} catch (Exception ex) {
+						Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+					}
+				}
+			}
+		}
+
+		try {
+			config.save(CONFIG_FILE);
+		} catch (IOException ex) {
+			Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+		}
+	}
+
+	private static final Pattern SPACE = Pattern.compile(" ");
+		private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+
+	public static int getSeconds(String str) {
+	str = SPACE.matcher(str).replaceAll("");
+		final char unit = str.charAt(str.length() - 1);
+		str = NOT_NUMERIC.matcher(str).replaceAll("");
+		double num;
+		try {
+			num = Double.parseDouble(str);
+		} catch (Exception e) {
+			num = 0D;
+		}
+		switch (unit) {
+			case 'd':
+				num *= (double) 60 * 60 * 24;
+			    break;
+			    case 'h':
+				num *= (double) 60 * 60;
+			    break;
+			    case 'm':
+				num *= 60;
+                break;
+				default:
+			    case 's':
+				    break;
+		}
+		return (int) num;
+}
+
+	protected static String timeSummary(int seconds) {
+	String time = "";
+
+		if (seconds > 60 * 60 * 24) {
+			time += TimeUnit.SECONDS.toDays(seconds) + "d";
+			seconds %= 60 * 60 * 24;
+		}
+
+		if (seconds > 60 * 60) {
+			time += TimeUnit.SECONDS.toHours(seconds) + "h";
+			seconds %= 60 * 60;
+		}
+
+		if (seconds > 0) {
+			time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+		}
+		return time;
+}
+
+	private static void set(String path, Object val) {
+	config.set(path, val);
+}
+
+	private static boolean getBoolean(String path, boolean def) {
+	config.addDefault(path, def);
+		return config.getBoolean(path, config.getBoolean(path));
+}
+
+	private static double getDouble(String path, double def) {
+	 config.addDefault(path, def);
+		return config.getDouble(path, config.getDouble(path));
+}
+
+	private static float getFloat(String path, float def) {
+	 // TODO: Figure out why getFloat() always returns the default value.
+		return (float) getDouble(path, (double) def);
+}
+
+	private static int getInt(String path, int def) {
+	config.addDefault(path, def);
+		return config.getInt(path, config.getInt(path));
+}
+
+	private static <T> List<T> getList(String path, List<T> def) {
+	config.addDefault(path, def);
+		return (List<T>) config.getList(path, config.getList(path));
+}
+
+	private static String getString(String path, String def) {
+	config.addDefault(path, def);
+		return config.getString(path, config.getString(path));
+}
+
+	public static boolean disableEntityStuckChecks = false;
+private static void disableEntityStuckChecks() {
+	disableEntityStuckChecks = getBoolean("settings.disableEntityStuckChecks", false);
+}
+
+	public static String brandName = "Sugarcane";
+private static void brandName() {
+	brandName = getString("brand-name", brandName);
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneWorldConfig.java b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..c991057c5874ed1ed83c63736dc5c98d3eb8ed68
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneWorldConfig.java
@@ -0,0 +1,79 @@
+package org.sugarcanemc.sugarcane.config;
+
+import org.apache.commons.lang.BooleanUtils;
+import org.bukkit.World;
+import org.bukkit.configuration.ConfigurationSection;
+
+import java.util.Map;
+import java.util.function.Predicate;
+
+import net.minecraft.server.level.ServerLevel;
+
+import java.util.List;
+
+import static org.sugarcanemc.sugarcane.config.SugarcaneConfig.log;
+
+@SuppressWarnings("unused")
+public class SugarcaneWorldConfig {
+
+	private final ServerLevel level;
+	private final String worldName;
+	private final World.Environment environment;
+
+	public SugarcaneWorldConfig(ServerLevel level, String worldName, World.Environment environment) {
+		this.level = level;
+		this.worldName = worldName;
+		this.environment = environment;
+		init();
+	}
+
+	public void init() {
+		log("-------- World Settings For [" + worldName + "] --------");
+		SugarcaneConfig.readConfig(SugarcaneWorldConfig.class, this);
+	}
+
+	private void set(String path, Object val) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, val);
+		SugarcaneConfig.config.set("world-settings.default." + path, val);
+		if (SugarcaneConfig.config.get("world-settings." + worldName + "." + path) != null) {
+			SugarcaneConfig.config.addDefault("world-settings." + worldName + "." + path, val);
+			SugarcaneConfig.config.set("world-settings." + worldName + "." + path, val);
+		}
+	}
+
+	private ConfigurationSection getConfigurationSection(String path) {
+		ConfigurationSection section = SugarcaneConfig.config.getConfigurationSection("world-settings." + worldName + "." + path);
+		return section != null ? section : SugarcaneConfig.config.getConfigurationSection("world-settings.default." + path);
+	}
+
+	private String getString(String path, String def) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, def);
+		return SugarcaneConfig.config.getString("world-settings." + worldName + "." + path, SugarcaneConfig.config.getString("world-settings.default." + path));
+	}
+
+	private boolean getBoolean(String path, boolean def) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, def);
+		return SugarcaneConfig.config.getBoolean("world-settings." + worldName + "." + path, SugarcaneConfig.config.getBoolean("world-settings.default." + path));
+	}
+
+	private boolean getBoolean(String path, Predicate<Boolean> predicate) {
+		String val = getString(path, "default").toLowerCase();
+		Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+		return predicate.test(bool);
+	}
+
+	private double getDouble(String path, double def) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, def);
+		return SugarcaneConfig.config.getDouble("world-settings." + worldName + "." + path, SugarcaneConfig.config.getDouble("world-settings.default." + path));
+	}
+
+	private int getInt(String path, int def) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, def);
+		return SugarcaneConfig.config.getInt("world-settings." + worldName + "." + path, SugarcaneConfig.config.getInt("world-settings.default." + path));
+	}
+
+	private <T> List<?> getList(String path, T def) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, def);
+		return SugarcaneConfig.config.getList("world-settings." + worldName + "." + path, SugarcaneConfig.config.getList("world-settings.default." + path));
+	}
+}
\ No newline at end of file
