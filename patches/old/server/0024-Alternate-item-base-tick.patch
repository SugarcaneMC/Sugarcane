From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: TheArcaneBrony <myrainbowdash949@gmail.com>
Date: Tue, 8 Feb 2022 05:42:06 +0000
Subject: [PATCH] Alternate item base tick


diff --git a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
index 388b4af0511a750bb13d9632d47f6e49d8f0d145..1ea66613df431d0431d0e6bc4fe82362c3d8e28c 100644
--- a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
@@ -5,6 +5,7 @@ import java.util.List;
 import java.util.Objects;
 import java.util.UUID;
 import javax.annotation.Nullable;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
@@ -19,7 +20,6 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
@@ -32,7 +32,6 @@ import net.minecraft.sounds.SoundSource;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.tags.ItemTags;
-import net.minecraft.util.Mth;
 import org.bukkit.event.entity.EntityPickupItemEvent;
 import org.bukkit.event.player.PlayerPickupItemEvent;
 // CraftBukkit end
@@ -61,6 +60,8 @@ public class ItemEntity extends Entity {
     public boolean immuneToFire = false;
     public boolean immuneToLightning = false;
     // Purpur end
+    //Sugarcane
+    public boolean reducedTick = true;
 
     public ItemEntity(EntityType<? extends ItemEntity> type, Level world) {
         super(type, world);
@@ -104,23 +105,71 @@ public class ItemEntity extends Entity {
         this.getEntityData().define(ItemEntity.DATA_ITEM, ItemStack.EMPTY);
     }
 
+    public void reducedBaseTick() {
+        this.level.getProfiler().push("itemReducedBaseTick");
+//        this.feetBlockState = null;
+
+        this.walkDistO = this.walkDist;
+        this.xRotO = this.getXRot();
+        this.yRotO = this.getYRot();
+        if (this.isInWater()) {
+            this.updateInWaterStateAndDoFluidPushing();
+//        this.updateFluidOnEyes();
+            this.updateSwimming();
+        }
+        if (this.level.isClientSide) {
+            this.clearFire();
+        } else if (this.remainingFireTicks > 0) {
+            if (this.fireImmune()) {
+                this.setRemainingFireTicks(this.remainingFireTicks - 4);
+                if (this.remainingFireTicks < 0) {
+                    this.clearFire();
+                }
+            } else {
+                if (this.remainingFireTicks % 20 == 0 && !this.isInLava()) {
+                    this.hurt(DamageSource.ON_FIRE, 1.0F);
+                }
+                this.setRemainingFireTicks(this.remainingFireTicks - 1);
+            }
+        }
+
+        if (this.isInLava()) {
+            this.lavaHurt();
+            this.fallDistance *= 0.5F;
+            // CraftBukkit start
+        } else {
+            this.lastLavaContact = null;
+            // CraftBukkit end
+        }
+
+        this.checkOutOfWorld();
+        if (!this.level.isClientSide) {
+            this.setSharedFlagOnFire(this.remainingFireTicks > 0);
+        }
+
+//        this.firstTick = false;
+        this.level.getProfiler().pop();
+    }
+
     @Override
     public void tick() {
         if (this.getItem().isEmpty()) {
             this.discard();
         } else {
-            super.tick();
+            if (!reducedTick) super.tick();
+            else reducedBaseTick();
             // Sugarcane start - Item drop behavior
-            if(SugarcaneConfig.SplitItems && this.getItem().getCount() > 1){
+            if (SugarcaneConfig.SplitItems && this.getItem().getCount() > 1) {
                 for (int i = 0; i < this.getItem().getCount(); i++) {
                     //spawn item
                     Vec3 pos = this.getEyePosition();
                     var is = this.getItem().copy();
                     is.setCount(1);
                     ItemEntity a = this.spawnAtLocation(is);
-                    if(this.getDeltaMovement().normalize().length() == 0)
-                        a.setDeltaMovement((Math.random()*2-1)/10, Math.random(), (Math.random()*2-1)/10);
-                    else a.setDeltaMovement(this.getDeltaMovement().multiply(1+(Math.random())/10, Math.random(), 1+(Math.random())/10));
+                    if (this.getDeltaMovement().normalize().length() == 0)
+                        a.setDeltaMovement((Math.random() * 2 - 1) / 10, Math.random() / 20, (Math.random() * 2 - 1) / 10);
+                    else
+                        a.setDeltaMovement(this.getDeltaMovement().multiply(1 + (Math.random()) / 10, Math.random(), 1 + (Math.random()) / 10));
                     a.setPickUpDelay(this.pickupDelay);
                 }
                 this.discard();
@@ -157,7 +206,7 @@ public class ItemEntity extends Entity {
                 }
             }
 
-            if (!this.onGround || this.getDeltaMovement().horizontalDistanceSqr() > 9.999999747378752E-6D || (this.tickCount + this.getId()) % 4 == 0) { // Paper - Diff on change
+            if (!this.onGround || this.getDeltaMovement().horizontalDistanceSqr() > 0.000001 || (this.tickCount + this.getId()) % 20 == 0) { // Paper - Diff on change
                 this.move(MoverType.SELF, this.getDeltaMovement());
                 float f1 = 0.98F;
 
@@ -175,10 +224,7 @@ public class ItemEntity extends Entity {
                 }
             }
 
-            boolean flag = Mth.floor(this.xo) != Mth.floor(this.getX()) || Mth.floor(this.yo) != Mth.floor(this.getY()) || Mth.floor(this.zo) != Mth.floor(this.getZ());
-            int i = flag ? 2 : 40;
-
-            if (this.tickCount % i == 0 && !this.level.isClientSide && this.isMergable()) {
+            if (SugarcaneConfig.ItemMergeBehavior != 1 && this.tickCount % 20 == 0 && !this.level.isClientSide && this.isMergable()) {
                 this.mergeWithNeighbours();
             }
 
@@ -188,7 +234,7 @@ public class ItemEntity extends Entity {
             }
             // CraftBukkit end */
 
-            this.hasImpulse |= this.updateInWaterStateAndDoFluidPushing();
+            if(isInWater() || (this.tickCount + this.getId()) % 20 == 0) this.hasImpulse |= this.updateInWaterStateAndDoFluidPushing();
             if (!this.level.isClientSide) {
                 double d0 = this.getDeltaMovement().subtract(vec3d).lengthSqr();
 
@@ -249,7 +295,8 @@ public class ItemEntity extends Entity {
         if (this.isMergable()) {
             // Paper start - avoid item merge if stack size above max stack size
             ItemStack stack = getItem();
-            if (stack.getCount() >= stack.getMaxStackSize() && SugarcaneConfig.ItemMergeBehavior != 0) return; // Sugarcane - add exception for infinite stacking mode
+            if (stack.getCount() >= stack.getMaxStackSize() && SugarcaneConfig.ItemMergeBehavior != 0)
+                return; // Sugarcane - add exception for infinite stacking mode
             // Paper end
             // Spigot start
             double radius = level.spigotConfig.itemMerge;
@@ -264,18 +311,18 @@ public class ItemEntity extends Entity {
 
                 if (entityitem.isMergable()) {
                     // Paper Start - Fix items merging through walls
-                        if (this.level.paperConfig.fixItemsMergingThroughWalls) {
-                            // Pufferfish start - skip the allocations
+                    if (this.level.paperConfig.fixItemsMergingThroughWalls) {
+                        // Pufferfish start - skip the allocations
                             /*
                             net.minecraft.world.level.ClipContext rayTrace = new net.minecraft.world.level.ClipContext(this.position(), entityitem.position(),
                                 net.minecraft.world.level.ClipContext.Block.COLLIDER, net.minecraft.world.level.ClipContext.Fluid.NONE, this);
                             net.minecraft.world.phys.BlockHitResult rayTraceResult = level.clip(rayTrace);
                             if (rayTraceResult.getType() == net.minecraft.world.phys.HitResult.Type.BLOCK) continue;
                              */
-                            if (level.rayTraceDirect(this.position(), entityitem.position(), net.minecraft.world.phys.shapes.CollisionContext.of(this)) ==
+                        if (level.rayTraceDirect(this.position(), entityitem.position(), net.minecraft.world.phys.shapes.CollisionContext.of(this)) ==
                                 net.minecraft.world.phys.HitResult.Type.BLOCK) continue;
-                            // Pufferfish end
-                        }
+                        // Pufferfish end
+                    }
                     // Paper End
                     this.tryToMerge(entityitem);
                     if (this.isRemoved()) {
@@ -291,11 +338,13 @@ public class ItemEntity extends Entity {
         ItemStack itemstack = this.getItem();
 
         // Sugarcane - add merge behavior
-
-        if(SugarcaneConfig.ItemMergeBehavior == -1) return this.isAlive() && this.pickupDelay != 32767 && this.age != -32768 && this.age < this.getDespawnRate() && itemstack.getCount() < itemstack.getMaxStackSize();
-        // Sugarcane - merge items infinitely
-        else if(SugarcaneConfig.ItemMergeBehavior == 0) return this.isAlive() && this.pickupDelay != 32767 && this.age != -32768 && this.age < this.getDespawnRate();
-        // Sugarcane - limit to 1 item per stack
+        if (SugarcaneConfig.ItemMergeBehavior == 1) return false; //shortcut
+        if (SugarcaneConfig.ItemMergeBehavior == -1)
+            return this.isAlive() && this.pickupDelay != 32767 && this.age != -32768 && this.age < this.getDespawnRate() && itemstack.getCount() < itemstack.getMaxStackSize();
+            // Sugarcane - merge items infinitely
+        else if (SugarcaneConfig.ItemMergeBehavior == 0)
+            return this.isAlive() && this.pickupDelay != 32767 && this.age != -32768 && this.age < this.getDespawnRate();
+            // Sugarcane - limit to 1 item per stack
         else return false; // Sugarcane - handled during tick
     }
 
@@ -315,13 +364,15 @@ public class ItemEntity extends Entity {
 
     public static boolean areMergable(ItemStack stack1, ItemStack stack2) {
         // Sugarcane - item drop behavior - infinite merging
-        if(SugarcaneConfig.ItemMergeBehavior == 0) return !stack2.is(stack1.getItem()) ? false : (stack2.hasTag() ^ stack1.hasTag() ? false : !stack2.hasTag() || stack2.getTag().equals(stack1.getTag()));
-        else return !stack2.is(stack1.getItem()) ? false : (stack2.getCount() + stack1.getCount() > stack2.getMaxStackSize() ? false : (stack2.hasTag() ^ stack1.hasTag() ? false : !stack2.hasTag() || stack2.getTag().equals(stack1.getTag())));
+        if (SugarcaneConfig.ItemMergeBehavior == 0)
+            return !stack2.is(stack1.getItem()) ? false : (stack2.hasTag() ^ stack1.hasTag() ? false : !stack2.hasTag() || stack2.getTag().equals(stack1.getTag()));
+        else
+            return !stack2.is(stack1.getItem()) ? false : (stack2.getCount() + stack1.getCount() > stack2.getMaxStackSize() ? false : (stack2.hasTag() ^ stack1.hasTag() ? false : !stack2.hasTag() || stack2.getTag().equals(stack1.getTag())));
     }
 
     public static ItemStack merge(ItemStack stack1, ItemStack stack2, int maxCount) {
         // Sugarcane - item drop behavior - infinite merging
-        if(SugarcaneConfig.ItemMergeBehavior == 0) maxCount = Integer.MAX_VALUE;
+        if (SugarcaneConfig.ItemMergeBehavior == 0) maxCount = Integer.MAX_VALUE;
         int j = Math.min(maxCount - stack1.getCount(), stack2.getCount());
         ItemStack itemstack2 = stack1.copy();
 
@@ -332,9 +383,9 @@ public class ItemEntity extends Entity {
 
     private static void merge(ItemEntity targetEntity, ItemStack stack1, ItemStack stack2) {
         int max = 64;
-        if(SugarcaneConfig.ItemMergeBehavior == 0) max = Integer.MAX_VALUE;
+        if (SugarcaneConfig.ItemMergeBehavior == 0) max = Integer.MAX_VALUE;
         ItemStack itemstack2 = ItemEntity.merge(stack1, stack2, max);
-        if(SugarcaneConfig.verbose) {
+        if (SugarcaneConfig.verbose) {
             System.out.println(String.format("Item merged: %s + %s -> %s/%s", stack1.getCount(), stack2.getCount(), itemstack2.getCount(), max));
         }
 
@@ -342,7 +393,8 @@ public class ItemEntity extends Entity {
     }
 
     private static void merge(ItemEntity targetEntity, ItemStack targetStack, ItemEntity sourceEntity, ItemStack sourceStack) {
-        if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemMergeEvent(sourceEntity, targetEntity).isCancelled()) return; // CraftBukkit
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.callItemMergeEvent(sourceEntity, targetEntity).isCancelled())
+            return; // CraftBukkit
         ItemEntity.merge(targetEntity, targetStack, sourceStack);
         targetEntity.pickupDelay = Math.max(targetEntity.pickupDelay, sourceEntity.pickupDelay);
         targetEntity.age = Math.min(targetEntity.age, sourceEntity.age);
@@ -365,16 +417,16 @@ public class ItemEntity extends Entity {
             return false;
         } else if (!this.getItem().getItem().canBeHurtBy(source)) {
             return false;
-        // Purpur start
+            // Purpur start
         } else if (
                 (immuneToCactus && source == DamageSource.CACTUS) ||
-                (immuneToFire && (source.isFire() || source == DamageSource.IN_FIRE)) ||
-                (immuneToLightning && source == DamageSource.LIGHTNING_BOLT) ||
-                (immuneToExplosion && source.isExplosion())
+                        (immuneToFire && (source.isFire() || source == DamageSource.IN_FIRE)) ||
+                        (immuneToLightning && source == DamageSource.LIGHTNING_BOLT) ||
+                        (immuneToExplosion && source.isExplosion())
         ) {
             respawnOnClient();
             return false;
-        // Purpur end
+            // Purpur end
         } else {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.handleNonLivingEntityDamageEvent(this, source, amount)) {
@@ -408,7 +460,7 @@ public class ItemEntity extends Entity {
 
         if (!this.getItem().isEmpty()) {
             // Sugarcane start
-            while(this.getItem().getCount() > this.getItem().getMaxStackSize()){
+            while (this.getItem().getCount() > this.getItem().getMaxStackSize()) {
                 ItemStack e = this.getItem().copy();
                 e.setCount(this.getItem().getMaxStackSize());
                 this.spawnAtLocation(e).save(new CompoundTag());
@@ -458,7 +510,7 @@ public class ItemEntity extends Entity {
             boolean flyAtPlayer = false; // Paper
 
             // Paper start
-            if(pickupDelay <= 0) {
+            if (pickupDelay <= 0) {
                 // Sugarcane - Move paper event here
                 PlayerAttemptPickupItemEvent attemptEvent = new PlayerAttemptPickupItemEvent((org.bukkit.entity.Player) player.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
                 this.level.getCraftServer().getPluginManager().callEvent(attemptEvent);
@@ -486,12 +538,12 @@ public class ItemEntity extends Entity {
                     }
                     boolean full = false;
                     int added = 0;
-                    while(!full) {
+                    while (!full) {
                         if (this.pickupDelay == 0 && (this.owner == null || this.owner.equals(player.getUUID()))) {
                             ItemStack is = new ItemStack(this.getItem().getItem(), 1);
                             is.setTag(this.getItem().getTag());
 
-                            if(player.getInventory().add(is)) {
+                            if (player.getInventory().add(is)) {
                                 // Paper Start
                                 if (flyAtPlayer) {
                                     player.take(this, 1);
@@ -624,7 +676,7 @@ public class ItemEntity extends Entity {
     }
 
     // Paper start
-    public int getDespawnRate(){
+    public int getDespawnRate() {
         org.bukkit.Material material = this.getItem().getBukkitStack().getType();
         return level.paperConfig.altItemDespawnRateMap.getOrDefault(material, level.spigotConfig.itemDespawnRate);
     }
