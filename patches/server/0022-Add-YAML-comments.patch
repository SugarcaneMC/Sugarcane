commit 0bdc200871b4a1a00b4fa07ed04d189a8cbfba41 (HEAD -> master)
Author: The Arcane Brony <myrainbowdash949@gmail.com>
Date:   Wed Jul 14 21:39:55 2021 +0200

    Add YAML comments

diff --git a/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
index c9d44d58a..af423f9a8 100644
--- a/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
+++ b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
@@ -13,17 +13,20 @@ import java.util.regex.Pattern;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
+import org.sugarcanemc.sugarcane.util.YamlCommenter;
+
 public class SugarcaneConfig {
 	public static File CONFIG_FILE;
 	private static final String HEADER = "This is the main configuration file for Sugarcane.\n"
 			+ "Sugarcane contains many breaking changes and settings, so know what you are doing!\n"
 			+ "You have been warned!\n"
-                       + "Join our Discord to receive support & optimization help: https://sugarcanemc.org/discord\n";
+			+ "Join our Discord to receive support & optimization help: https://sugarcanemc.org/discord\n";
 	/*========================================================================*/
 	public static YamlConfiguration config;
-    public static int version; // since we're remapping sidestreams' configs we need this public
-    public static boolean verbose; // since we're remapping sidestreams' configs we need this public
-    /*========================================================================*/
+	private static final YamlCommenter c = new YamlCommenter();
+	public static int version; // since we're remapping sidestreams' configs we need this public
+	public static boolean verbose; // since we're remapping sidestreams' configs we need this public
+	/*========================================================================*/
 
 	public static void init(File configFile) {
 		CONFIG_FILE = configFile;
@@ -36,12 +39,18 @@ public class SugarcaneConfig {
 			throw Throwables.propagate(ex);
 		}
 		config.options().header(HEADER);
+
 		config.options().copyDefaults(true);
 		verbose = getBoolean("verbose", false);
 		version = getInt("config-version", 1);
 		set("config-version", 1);
 		removeLeftovers();
 		readConfig(SugarcaneConfig.class, null);
+		addComments();
+	}
+	private static void addComments() {
+		c.addComment("verbose", "Enable verbose mode for sugarcane code!\nWarning: may increase log size and/or hurt performance!");
+		c.addComment("brand-name", "Set the software name the server reports to be using.");
 	}
 
 	private static void removeLeftovers() {
@@ -90,16 +99,18 @@ public class SugarcaneConfig {
 
 		try {
 			config.save(CONFIG_FILE);
+			c.saveComments(CONFIG_FILE);
 		} catch (IOException ex) {
 			Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
 		}
 	}
 
+
 	private static final Pattern SPACE = Pattern.compile(" ");
-		private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+	private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
 
 	public static int getSeconds(String str) {
-	str = SPACE.matcher(str).replaceAll("");
+		str = SPACE.matcher(str).replaceAll("");
 		final char unit = str.charAt(str.length() - 1);
 		str = NOT_NUMERIC.matcher(str).replaceAll("");
 		double num;
@@ -116,10 +127,10 @@ public class SugarcaneConfig {
 			default: break;
 		}
 		return (int) num;
-}
+	}
 
 	protected static String timeSummary(int seconds) {
-	String time = "";
+		String time = "";
 
 		if (seconds > 60 * 60 * 24) {
 			time += TimeUnit.SECONDS.toDays(seconds) + "d";
@@ -135,43 +146,50 @@ public class SugarcaneConfig {
 			time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
 		}
 		return time;
-}
+	}
 
 	private static void set(String path, Object val) {
-	config.set(path, val);
-}
+		config.set(path, val);
+	}
 
 	private static boolean getBoolean(String path, boolean def) {
-	config.addDefault(path, def);
+		config.addDefault(path, def);
 		return config.getBoolean(path, config.getBoolean(path));
-}
+	}
 
 	private static double getDouble(String path, double def) {
-	 config.addDefault(path, def);
+		config.addDefault(path, def);
 		return config.getDouble(path, config.getDouble(path));
-}
+	}
 
 	private static float getFloat(String path, float def) {
-	 // TODO: Figure out why getFloat() always returns the default value.
+		// TODO: Figure out why getFloat() always returns the default value.
 		return (float) getDouble(path, (double) def);
-}
+	}
 
 	private static int getInt(String path, int def) {
-	config.addDefault(path, def);
+		config.addDefault(path, def);
 		return config.getInt(path, config.getInt(path));
-}
+	}
 
 	private static <T> List<T> getList(String path, List<T> def) {
-	config.addDefault(path, def);
+		config.addDefault(path, def);
 		return (List<T>) config.getList(path, config.getList(path));
-}
+	}
 
 	private static String getString(String path, String def) {
-	config.addDefault(path, def);
+		config.addDefault(path, def);
 		return config.getString(path, config.getString(path));
-}
+	}
+
 
-public static boolean logPlayerLoginLoc = true;
+
+	//define settings
+	public static boolean debug = false;
+	private static void debug() {
+		debug = getBoolean("debug", false);
+	}
+	public static boolean logPlayerLoginLoc = true;
 	private static void general() {
 		logPlayerLoginLoc = getBoolean("settings.log-player-login-location", logPlayerLoginLoc);
 	}
@@ -181,28 +199,28 @@ public static boolean logPlayerLoginLoc = true;
 	}
 
 	public static boolean disableEntityStuckChecks = false;
-private static void disableEntityStuckChecks() {
-	disableEntityStuckChecks = getBoolean("settings.disableEntityStuckChecks", false);
-}
+	private static void disableEntityStuckChecks() {
+		disableEntityStuckChecks = getBoolean("settings.disableEntityStuckChecks", false);
+	}
 
 	public static String brandName = "Sugarcane";
-private static void brandName() {
-	brandName = getString("brand-name", brandName);
-    }
-
-    public static boolean checkFlying = true;
-    public static boolean checkVehicleFlying = true;
-    private static void flightChecks() {
-        checkFlying = getBoolean("settings.checks.flight", checkFlying);
-        checkVehicleFlying = getBoolean("settings.checks.vehicle-flight", checkVehicleFlying);
-    }
-
-    public static int itemStuckSleepTicks = 1;
-    private static void itemStuckSleepTicks() {
-        itemStuckSleepTicks = getInt("settings.itemStuckSleepTicks", 1);
-    }
-
-    public static int ItemMergeBehavior = -1;
-    public static boolean SplitItems = false;
-    private static void shouldItemsMerge() { ItemMergeBehavior = getInt("ItemMergeBehavior", -1); SplitItems = ItemMergeBehavior == 1; }
+	private static void brandName() {
+		brandName = getString("brand-name", brandName);
+	}
+
+	public static boolean checkFlying = true;
+	public static boolean checkVehicleFlying = true;
+	private static void flightChecks() {
+		checkFlying = getBoolean("settings.checks.flight", checkFlying);
+		checkVehicleFlying = getBoolean("settings.checks.vehicle-flight", checkVehicleFlying);
+	}
+
+	public static int itemStuckSleepTicks = 1;
+	private static void itemStuckSleepTicks() {
+		itemStuckSleepTicks = getInt("settings.itemStuckSleepTicks", 1);
+	}
+
+	public static int ItemMergeBehavior = -1;
+	public static boolean SplitItems = false;
+	private static void shouldItemsMerge() { ItemMergeBehavior = getInt("ItemMergeBehavior", -1); SplitItems = ItemMergeBehavior == 1; }
 }
\ No newline at end of file
diff --git a/src/main/java/org/sugarcanemc/sugarcane/util/YamlCommenter.java b/src/main/java/org/sugarcanemc/sugarcane/util/YamlCommenter.java
new file mode 100644
index 000000000..a6233e41b
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/util/YamlCommenter.java
@@ -0,0 +1,71 @@
+package org.sugarcanemc.sugarcane.util;
+
+import org.sugarcanemc.sugarcane.config.SugarcaneConfig;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class YamlCommenter {
+    private static final Pattern pattern = Pattern.compile("^\\s*", Pattern.MULTILINE);
+    private static boolean verbose;
+    private HashMap<String, String> comments = new HashMap<>();
+    /**
+     * Add comment to a config option.
+     * Supports multiline comments!
+     * @param path Config path to add comment to
+     * @param comment Comment to add
+     */
+    public void addComment(String path, String comment) {
+        comments.put(path, comment);
+    }
+
+    /**
+     * Saves comments to config file
+     * @param file File to save to
+     * @throws IOException
+     */
+    public void saveComments(File file) throws IOException {
+        verbose = SugarcaneConfig.debug;
+        System.out.println("Verbose: " + verbose);
+        ArrayList<String> lines = (ArrayList<String>) Files.readAllLines(file.toPath());
+        for (Map.Entry<String, String> _comment : comments.entrySet()){
+            int line = findLine(lines, _comment.getKey());
+            if(line>=0)
+                lines.add(line, "# " + _comment.getValue().replace("\n", "\n# "));
+        }
+        System.out.println(String.join("\n", lines));
+//        System.exit(0);
+    }
+    private int findLine(List<String> lines, String key){
+        String[] parts = key.split(".");
+        if(verbose) System.out.println("Looking for " + String.join(".", parts) + "...");
+        int _line = 0;
+        int _indent;
+        List<String> _cpath = new ArrayList<>();
+        for (String part : parts){
+            _cpath.add(part);
+
+            if(verbose) System.out.println("Looking for " + String.join(".", _cpath) + "...");
+            for (int i = _line; i < lines.size(); i++) {
+                if(lines.get(i).trim().startsWith(part)) {
+                    _line = i;
+                    _indent = pattern.matcher(lines.get(i)).groupCount();
+                    System.out.printf("Found key %s at line %d with %d indents (%s)%n", String.join(".", _cpath), i, _indent, lines.get(i));
+                }
+            }
+        }
+        if(_cpath.equals(parts)) return _line;
+        else {
+            System.out.println(String.format("Unable to find key %s!", String.join(".", _cpath)));
+            System.exit(0);
+            return -1;
+        }
+    }
+}
\ No newline at end of file
