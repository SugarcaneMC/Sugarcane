From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ivan Pekov <ivan@mrivanplays.com>
Date: Wed, 30 Sep 2020 18:05:45 +0300
Subject: [PATCH] Add nspt command

Original code by Yatopia, licensed under MIT License

diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 74f3b9cc03be46398c2246f27c610508a488463b..a29ad508db19f12c2d8beb436ea18eea153de2a8 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -217,6 +217,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             DedicatedServer.LOGGER.error("Unable to load server configuration", e);
             return false;
         }
+        org.sugarcanemc.sugarcane.config.SugarcaneConfig.registerCommands(); // Sugarcane
         com.destroystokyo.paper.PaperConfig.registerCommands();
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d93912b2e8239e30aef72684888ca730fdfb371e..3405308fb469ff92aace645a51a0aa00606611fa 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -927,6 +927,7 @@ public final class CraftServer implements Server {
         this.reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
+        org.sugarcanemc.sugarcane.config.SugarcaneConfig.registerCommands(); // Sugarcane
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
diff --git a/src/main/java/org/sugarcanemc/sugarcane/command/NSPTCommand.java b/src/main/java/org/sugarcanemc/sugarcane/command/NSPTCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..e81be2fe730c98c79e5e9c3f529e9cad3dadc96b
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/command/NSPTCommand.java
@@ -0,0 +1,59 @@
+package org.sugarcanemc.sugarcane.command;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+public class NSPTCommand extends Command {
+
+    public NSPTCommand(String name) {
+        super(name);
+        this.description = "View server tick times in nanoseconds";
+        this.usageMessage = "/nspt";
+        this.setPermission("bukkit.command.nspt");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        MinecraftServer server = MinecraftServer.getServer();
+
+        List<String> times = new ArrayList<>();
+        times.addAll(eval(server.tickTimes5s.getTimes()));
+        times.addAll(eval(server.tickTimes10s.getTimes()));
+        times.addAll(eval(server.tickTimes60s.getTimes()));
+
+        sender.sendMessage("§6Server tick NS times §e(§7avg§e/§7min§e/§7max§e)§6 from last 5s§7,§6 10s§7,§6 1m§e:");
+        sender.sendMessage(String.format("§6◴ %s§7/%s§7/%s§e, %s§7/%s§7/%s§e, %s§7/%s§7/%s", times.toArray()));
+        return true;
+    }
+
+    private static List<String> eval(long[] times) {
+        long min = Integer.MAX_VALUE;
+        long max = 0L;
+        long total = 0L;
+        for (long value : times) {
+            if (value > 0L && value < min) min = value;
+            if (value > max) max = value;
+            total += value;
+        }
+        double avgD = ((double) total / (double) times.length);
+        return Arrays.asList(getColor(avgD), getColor(min), getColor(max));
+    }
+
+    private static String getColor(double avg) {
+        return ChatColor.COLOR_CHAR + (avg >= 5E+7 ? "c" : avg >= (4E+7) ? "e" : "a") + avg;
+    }
+}
diff --git a/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
index dc2f698ea72cb32bf4714d95b3e31f8b76c2dae0..4a937cb32be3b8b7ab105b1f47f06ce4d8105337 100644
--- a/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
+++ b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
@@ -6,11 +6,15 @@ import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.regex.Pattern;
 import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.sugarcanemc.sugarcane.command.NSPTCommand;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 public class SugarcaneConfig {
@@ -22,8 +26,14 @@ public class SugarcaneConfig {
 	public static YamlConfiguration config;
     public static int version; // since we're remapping sidestreams' configs we need this public
     public static boolean verbose; // since we're remapping sidestreams' configs we need this public
+	private static Map<String, Command> commands;
     /*========================================================================*/
 
+	static {
+		commands = new HashMap<>();
+		commands.put("nspt", new NSPTCommand("nspt"));
+	}
+
 	public static void init(File configFile) {
 		CONFIG_FILE = configFile;
 		config = new YamlConfiguration();
@@ -43,6 +53,12 @@ public class SugarcaneConfig {
 		readConfig(SugarcaneConfig.class, null);
 	}
 
+	public static void registerCommands() {
+		for (Map.Entry<String, Command> entry : commands.entrySet()) {
+			net.minecraft.server.MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Sugarcane", entry.getValue());
+		}
+	}
+
 	private static void removeLeftovers() {
 		// this method is only to remove non-used values in the config
 
