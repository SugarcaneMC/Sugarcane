From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SugarcaneMC <sugarcanemcorg@gmail.com>
Date: Mon, 6 Sep 2021 17:24:10 +0200
Subject: [PATCH] Sugarcane config files

also some settings from Yatopia & Sugarcane that don't deserve a patch, licensed under MIT license

diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index c5803537b23d44bad5f447bd2f98d54226d3e80e..03d0d2fa893e88ff7074827c75828f509dcc0b2c 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -232,7 +232,8 @@ public class TimingsExport extends Thread {
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)), // Airplane
             pair("airplane", mapAsJSON(gg.airplane.AirplaneConfig.getConfigCopy(), null)), // Airplane
-            pair("purpur", mapAsJSON(Bukkit.spigot().getPurpurConfig(), null))
+            pair("purpur", mapAsJSON(Bukkit.spigot().getPurpurConfig(), null)),
+            pair("sugarcane", mapAsJSON(Bukkit.spigot().getSugarcaneConfig(), null))
             // Purpur end
         ));
 
diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index f5ec3cd3823b363c7213f2c9fc3d85b324fce09d..94a945df879bc5e4c8e093aa3be79cf14ee62204 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -215,7 +215,7 @@ public class PaperConfig {
         timings = reallyEnableTimings;
         // Airplane end */ // Purpur end
         boolean verboseTimings = getBoolean("timings.verbose", true);
-        TimingsManager.url = getString("timings.url", "https://timings.pl3x.net/");
+        TimingsManager.url = getString("timings.url", "https://timin.gs/");
         if (!TimingsManager.url.endsWith("/")) {
             TimingsManager.url += "/";
         }
diff --git a/src/main/java/gg/airplane/compat/ServerConfigurations.java b/src/main/java/gg/airplane/compat/ServerConfigurations.java
index f9a71ff3edd7e7b6cda680e5a156373b5aa813c2..903317459fbc257f169ea0553f87e7e54df857c8 100644
--- a/src/main/java/gg/airplane/compat/ServerConfigurations.java
+++ b/src/main/java/gg/airplane/compat/ServerConfigurations.java
@@ -24,7 +24,9 @@ public class ServerConfigurations {
       "bukkit.yml",
       "spigot.yml",
       "paper.yml",
-      "airplane.yml"
+      "purpur.yml",
+      "airplane.yml",
+      "sugarcane.yml"
     };
 
     public static Map<String, String> getCleanCopies() throws IOException {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index d5c61053f6af91aa5d0894750ab86372a91c9a73..d5d53df304d9f74ea40d80e8b00c2548674b0f11 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -245,6 +245,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Paper end
         gg.airplane.AirplaneConfig.load(); // Airplane - config
         gg.airplane.commands.AirplaneCommands.init(); // Airplane - command
+        // Sugarcane start - config
+        try {
+            org.sugarcanemc.sugarcane.config.SugarcaneConfig.init((java.io.File) options.valueOf("sugarcane-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        // Sugarcane end
 
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index d27186a78719ac4e3d1ce5b8d7d727f18e9e3a95..0e4a3ebd08dbd74dfa34bf6f8ebdd587841d6241 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -398,18 +398,23 @@ public abstract class LivingEntity extends Entity {
         this.level.getProfiler().push("livingEntityBaseTick");
         boolean flag = this instanceof net.minecraft.world.entity.player.Player;
 
-        if (this.isAlive()) {
-            if (this.isInWall()) {
-                this.hurt(DamageSource.IN_WALL, 1.0F);
-            } else if (flag && !this.level.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
-                double d0 = this.level.getWorldBorder().getDistanceToBorder((Entity) this) + this.level.getWorldBorder().getDamageSafeZone();
-
-                if (d0 < 0.0D) {
-                    double d1 = this.level.getWorldBorder().getDamagePerBlock();
-
-                    if (d1 > 0.0D) {
-                        if (level.purpurConfig.teleportIfOutsideBorder && this instanceof ServerPlayer) { ((ServerPlayer) this).teleport(MCUtil.toLocation(level, ((ServerLevel) level).getSharedSpawnPos())); return; } // Purpur
-                        this.hurt(DamageSource.IN_WALL, (float) Math.max(1, Mth.floor(-d0 * d1)));
+        if (!org.sugarcanemc.sugarcane.config.SugarcaneConfig.disableEntityStuckChecks) { // Sugarcane
+            if (this.isAlive()) {
+                if (this.isInWall()) {
+                    this.hurt(DamageSource.IN_WALL, 1.0F);
+                } else if (flag && !this.level.getWorldBorder().isWithinBounds(this.getBoundingBox())) {
+                    double d0 = this.level.getWorldBorder().getDistanceToBorder((Entity) this) + this.level.getWorldBorder().getDamageSafeZone();
+
+                    if (d0 < 0.0D) {
+                        double d1 = this.level.getWorldBorder().getDamagePerBlock();
+
+                        if (d1 > 0.0D) {
+                            if (level.purpurConfig.teleportIfOutsideBorder && this instanceof ServerPlayer) {
+                                ((ServerPlayer) this).teleport(MCUtil.toLocation(level, ((ServerLevel) level).getSharedSpawnPos()));
+                                return;
+                            } // Purpur
+                            this.hurt(DamageSource.IN_WALL, (float) Math.max(1, Mth.floor(-d0 * d1)));
+                        }
                     }
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 317b907d5e50974229b5973b61369e0380db06e2..c11829e647232a7f8ad3a70558091bf48b3b89bd 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -170,6 +170,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final net.pl3x.purpur.PurpurWorldConfig purpurConfig; // Purpur
 
+    public final org.sugarcanemc.sugarcane.config.SugarcaneWorldConfig sugarcaneConfig; // Sugarcane - world config
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -371,6 +373,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), this.spigotConfig); // Paper
         this.purpurConfig = new net.pl3x.purpur.PurpurWorldConfig((ServerLevel) this, ((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
+        this.sugarcaneConfig = new org.sugarcanemc.sugarcane.config.SugarcaneWorldConfig((ServerLevel) this, ((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Sugarcane - world config
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 337cbfa8e2e56d9c46b535bdd05bee20293427ec..5c13790540bb8e03aa19ad6795773c32db8a8562 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -925,6 +925,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         net.pl3x.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        org.sugarcanemc.sugarcane.config.SugarcaneConfig.init((File) console.options.valueOf("sugarcane-settings")); // Sugarcane - config
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -966,6 +967,7 @@ public final class CraftServer implements Server {
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
             world.purpurConfig.init(); // Purpur
+            world.sugarcaneConfig.init(); // Sugarcane
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2600,6 +2602,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Sugarcane start - config
+        @Override
+        public YamlConfiguration getSugarcaneConfig() {
+            return org.sugarcanemc.sugarcane.config.SugarcaneConfig.config;
+        }
+        // Sugarcane end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 56674053351962a75b2731dde137dbbc0c70dbde..920b56846b6d96c017215e46cc7ed41fba739301 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -155,6 +155,14 @@ public class Main {
                     .describedAs("Yml file");
                 // Purpur end
 
+                // Sugarcane start - config
+                acceptsAll(asList("sugarcane", "sugarcane-settings"), "File for Sugarcane settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("sugarcane.yml"))
+                        .describedAs("Yml file");
+                // Sugarcane end
+                
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..c75c0de0bf7f1d331da76a31a3a21ac708587724
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneConfig.java
@@ -0,0 +1,191 @@
+package org.sugarcanemc.sugarcane.config;
+
+import com.google.common.base.Throwables;
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+public class SugarcaneConfig {
+	public static File CONFIG_FILE;
+	private static final String HEADER = "This is the main configuration file for Sugarcane.\n"
+			+ "Sugarcane contains many breaking changes and settings, so know what you are doing!\n"
+			+ "You have been warned!\n"
+                       + "Join our Discord to receive support & optimization help: https://sugarcanemc.org/discord\n";
+	/*========================================================================*/
+	public static YamlConfiguration config;
+    public static int version; // since we're remapping sidestreams' configs we need this public
+    public static boolean verbose; // since we're remapping sidestreams' configs we need this public
+    /*========================================================================*/
+
+	public static void init(File configFile) {
+		CONFIG_FILE = configFile;
+		config = new YamlConfiguration();
+		try {
+			config.load(CONFIG_FILE);
+		} catch (IOException ex) {
+		} catch (InvalidConfigurationException ex) {
+			Bukkit.getLogger().log(Level.SEVERE, "Could not load sugarcane.yml, please correct your syntax errors", ex);
+			throw Throwables.propagate(ex);
+		}
+		config.options().header(HEADER);
+		config.options().copyDefaults(true);
+		verbose = getBoolean("verbose", false);
+		version = getInt("config-version", 1);
+		set("config-version", 1);
+		removeLeftovers();
+		readConfig(SugarcaneConfig.class, null);
+	}
+
+	private static void removeLeftovers() {
+		// this method is only to remove non-used values in the config
+
+		// leftover from rainforest
+		if (config.get("world-settings") != null) {
+			set("world-settings", null);
+		}
+		if (config.get("allow-player-item-duplication") != null) {
+			set("allow-player-item-duplication", null);
+		}
+		if (config.get("allow-ridable-chestable-duping") != null) {
+			set("allow-ridable-chestable-duping", null);
+		}
+		if (config.get("allow-sand-duping") != null) {
+			set("allow-sand-duping", null);
+		}
+	}
+
+	protected static void logError(String s) {
+		Bukkit.getLogger().severe(s);
+	}
+
+	protected static void log(String s) {
+		if (verbose) {
+			Bukkit.getLogger().info(s);
+		}
+	}
+
+	static void readConfig(Class<?> clazz, Object instance) {
+		for (Method method : clazz.getDeclaredMethods()) {
+			if (Modifier.isPrivate(method.getModifiers())) {
+				if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+					try {
+						method.setAccessible(true);
+						method.invoke(instance);
+					} catch (InvocationTargetException ex) {
+						throw Throwables.propagate(ex.getCause());
+					} catch (Exception ex) {
+						Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+					}
+				}
+			}
+		}
+
+		try {
+			config.save(CONFIG_FILE);
+		} catch (IOException ex) {
+			Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+		}
+	}
+
+	private static final Pattern SPACE = Pattern.compile(" ");
+		private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+
+	public static int getSeconds(String str) {
+	str = SPACE.matcher(str).replaceAll("");
+		final char unit = str.charAt(str.length() - 1);
+		str = NOT_NUMERIC.matcher(str).replaceAll("");
+		double num;
+		try {
+			num = Double.parseDouble(str);
+		} catch (Exception e) {
+			num = 0D;
+		}
+		switch (unit) {
+			case 'd':
+				num *= (double) 60 * 60 * 24;
+				break;
+				case 'h':
+				num *= (double) 60 * 60;
+				break;
+				case 'm':
+				num *= 60;
+				break;
+				default:
+				case 's':
+					break;
+		}
+		return (int) num;
+}
+
+	protected static String timeSummary(int seconds) {
+	String time = "";
+
+		if (seconds > 60 * 60 * 24) {
+			time += TimeUnit.SECONDS.toDays(seconds) + "d";
+			seconds %= 60 * 60 * 24;
+		}
+
+		if (seconds > 60 * 60) {
+			time += TimeUnit.SECONDS.toHours(seconds) + "h";
+			seconds %= 60 * 60;
+		}
+
+		if (seconds > 0) {
+			time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+		}
+		return time;
+}
+
+	private static void set(String path, Object val) {
+	config.set(path, val);
+}
+
+	private static boolean getBoolean(String path, boolean def) {
+	config.addDefault(path, def);
+		return config.getBoolean(path, config.getBoolean(path));
+}
+
+	private static double getDouble(String path, double def) {
+	 config.addDefault(path, def);
+		return config.getDouble(path, config.getDouble(path));
+}
+
+	private static float getFloat(String path, float def) {
+	 // TODO: Figure out why getFloat() always returns the default value.
+		return (float) getDouble(path, (double) def);
+}
+
+	private static int getInt(String path, int def) {
+	config.addDefault(path, def);
+		return config.getInt(path, config.getInt(path));
+}
+
+	private static <T> List<T> getList(String path, List<T> def) {
+	config.addDefault(path, def);
+		return (List<T>) config.getList(path, config.getList(path));
+}
+
+	private static String getString(String path, String def) {
+	config.addDefault(path, def);
+		return config.getString(path, config.getString(path));
+}
+
+	public static boolean disableEntityStuckChecks = false;
+private static void disableEntityStuckChecks() {
+	disableEntityStuckChecks = getBoolean("settings.disableEntityStuckChecks", false);
+}
+
+	public static String brandName = "Sugarcane";
+private static void brandName() {
+	brandName = getString("brand-name", brandName);
+    }
+
+}
diff --git a/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneWorldConfig.java b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..002a91d44042c63e040061960c3be649d2d702ea
--- /dev/null
+++ b/src/main/java/org/sugarcanemc/sugarcane/config/SugarcaneWorldConfig.java
@@ -0,0 +1,79 @@
+package org.sugarcanemc.sugarcane.config;
+
+import org.apache.commons.lang.BooleanUtils;
+import org.bukkit.World;
+import org.bukkit.configuration.ConfigurationSection;
+
+import java.util.Map;
+import java.util.function.Predicate;
+
+import net.minecraft.server.level.ServerLevel;
+
+import java.util.List;
+
+import static org.sugarcanemc.sugarcane.config.SugarcaneConfig.log;
+
+@SuppressWarnings("unused")
+public class SugarcaneWorldConfig {
+
+	private final ServerLevel level;
+	private final String worldName;
+	private final World.Environment environment;
+
+	public SugarcaneWorldConfig(ServerLevel level, String worldName, World.Environment environment) {
+		this.level = level;
+		this.worldName = worldName;
+		this.environment = environment;
+		init();
+	}
+
+	public void init() {
+		log("-------- World Settings For [" + worldName + "] --------");
+		SugarcaneConfig.readConfig(SugarcaneWorldConfig.class, this);
+	}
+
+	private void set(String path, Object val) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, val);
+		SugarcaneConfig.config.set("world-settings.default." + path, val);
+		if (SugarcaneConfig.config.get("world-settings." + worldName + "." + path) != null) {
+			SugarcaneConfig.config.addDefault("world-settings." + worldName + "." + path, val);
+			SugarcaneConfig.config.set("world-settings." + worldName + "." + path, val);
+		}
+	}
+
+	private ConfigurationSection getConfigurationSection(String path) {
+		ConfigurationSection section = SugarcaneConfig.config.getConfigurationSection("world-settings." + worldName + "." + path);
+		return section != null ? section : SugarcaneConfig.config.getConfigurationSection("world-settings.default." + path);
+	}
+
+	private String getString(String path, String def) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, def);
+		return SugarcaneConfig.config.getString("world-settings." + worldName + "." + path, SugarcaneConfig.config.getString("world-settings.default." + path));
+	}
+
+	private boolean getBoolean(String path, boolean def) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, def);
+		return SugarcaneConfig.config.getBoolean("world-settings." + worldName + "." + path, SugarcaneConfig.config.getBoolean("world-settings.default." + path));
+	}
+
+	private boolean getBoolean(String path, Predicate<Boolean> predicate) {
+		String val = getString(path, "default").toLowerCase();
+		Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+		return predicate.test(bool);
+	}
+
+	private double getDouble(String path, double def) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, def);
+		return SugarcaneConfig.config.getDouble("world-settings." + worldName + "." + path, SugarcaneConfig.config.getDouble("world-settings.default." + path));
+	}
+
+	private int getInt(String path, int def) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, def);
+		return SugarcaneConfig.config.getInt("world-settings." + worldName + "." + path, SugarcaneConfig.config.getInt("world-settings.default." + path));
+	}
+
+	private <T> List<?> getList(String path, T def) {
+		SugarcaneConfig.config.addDefault("world-settings.default." + path, def);
+		return SugarcaneConfig.config.getList("world-settings." + worldName + "." + path, SugarcaneConfig.config.getList("world-settings.default." + path));
+	}
+}
